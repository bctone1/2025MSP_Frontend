'use client';
import { useState, useEffect, useRef } from 'react';
import { formatDate, storage, formatFileSize, modalheader } from '@/utill/utill';
import "@/styles/assistant-page.css"
import { useSession } from "next-auth/react";

export default function AssistantPage({ onMenuClick, currentProject, setcurrentProject, currentSession, setcurrentSession }) {
    const { data: session } = useSession();
    const hasFetched = useRef(false);

    // ÏóêÏù¥Ï†ÑÌä∏ ÏÑ†ÌÉù Î™®Îã¨ ÌôúÏÑ±Ìôî
    const [Agent, setAgent] = useState(false);
    const [Knowledge, setKnowledge] = useState(false);

    const [conversations, setconversations] = useState([]);
    const fetchChatSessions = async () => {
        try {
            const response = await fetch(
                `${process.env.NEXT_PUBLIC_API_URL}/MSP_CHAT/msp_read_chat_session_by_user`,
                {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({ user_id: session?.user?.id }),
                }
            );
            const data = await response.json();
            console.log("‚úÖ API ÏùëÎãµ:", data);
            setconversations(data.sessions);
        } catch (error) {
            console.error("‚ùå ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò:", error);
        }
    };

    useEffect(() => {
        if (!session?.user?.id) return;
        if (hasFetched.current) return;
        hasFetched.current = true;
        fetchChatSessions();
    }, [session?.user?.id]);

    useEffect(() => {
        if (currentSession.id === 0) return;
        const fetchMessages = async () => {
            try {
                const response = await fetch(
                    `${process.env.NEXT_PUBLIC_API_URL}/MSP_CHAT/msp_read_message_by_session`,
                    {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                        },
                        body: JSON.stringify({ session_id: currentSession.id }),
                    }
                );
                const data = await response.json();
                setMessages(data);
            } catch (error) {
                console.error("‚ùå ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò:", error);
            }
        };

        fetchMessages();
    }, [currentSession]);

    const [agents, setagents] = useState([
        {
            id: "research",
            active: true,
            avatar: "üîç",
            avatarBg: "#3b82f6",
            name: "Î¶¨ÏÑúÏπò ÏóêÏù¥Ï†ÑÌä∏",
            desc: "Ïõπ Í≤ÄÏÉâ, ÏûêÎ£å Ï°∞ÏÇ¨, ÏãúÏû• Î∂ÑÏÑù Îì± Îã§ÏñëÌïú Ï†ïÎ≥¥ ÏàòÏßëÍ≥º Ïó∞Íµ¨ ÏóÖÎ¨¥Î•º Îã¥ÎãπÌï©ÎãàÎã§.",
            capabilities: ["Ïõπ Í≤ÄÏÉâ", "Îç∞Ïù¥ÌÑ∞ ÏàòÏßë", "ÏãúÏû• Î∂ÑÏÑù", "Î≥¥Í≥†ÏÑú ÏûëÏÑ±"],
            model: "Claude-3 Haiku",
            description: "Ïõπ Í≤ÄÏÉâ Î∞è Îç∞Ïù¥ÌÑ∞ ÏàòÏßë Ï†ÑÎ¨∏"
        },
        {
            id: "coding",
            active: true,
            avatar: "üíª",
            avatarBg: "#10b981",
            name: "ÏΩîÎî© ÏóêÏù¥Ï†ÑÌä∏",
            desc: "ÌîÑÎ°úÍ∑∏ÎûòÎ∞ç, ÏΩîÎìú Î¶¨Î∑∞, ÎîîÎ≤ÑÍπÖ, ÏãúÏä§ÌÖú ÏÑ§Í≥Ñ Îì± Î™®Îì† Í∞úÎ∞ú Í¥ÄÎ†® ÏóÖÎ¨¥Î•º Ï≤òÎ¶¨Ìï©ÎãàÎã§.",
            capabilities: ["ÏΩîÎìú ÏûëÏÑ±", "ÎîîÎ≤ÑÍπÖ", "Î¶¨Ìå©ÌÜ†ÎßÅ", "ÏïÑÌÇ§ÌÖçÏ≤ò"],
            model: "Claude-3 Sonnet",
            description: "ÌîÑÎ°úÍ∑∏ÎûòÎ∞ç Î∞è ÏΩîÎìú ÏµúÏ†ÅÌôî"
        },
        {
            id: "analysis",
            active: true,
            avatar: "üìä",
            avatarBg: "#8b5cf6",
            name: "Î∂ÑÏÑù ÏóêÏù¥Ï†ÑÌä∏",
            desc: "Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù, ÌÜµÍ≥Ñ Ï≤òÎ¶¨, Ïù∏ÏÇ¨Ïù¥Ìä∏ ÎèÑÏ∂ú, ÏãúÍ∞ÅÌôî Îì± Î∂ÑÏÑù ÏóÖÎ¨¥Î•º Ï†ÑÎã¥Ìï©ÎãàÎã§.",
            capabilities: ["Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù", "ÌÜµÍ≥Ñ Ï≤òÎ¶¨", "ÏãúÍ∞ÅÌôî", "ÏòàÏ∏° Î™®Îç∏"],
            model: "Claude-3 Sonnet",
            description: "Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù Î∞è Ïù∏ÏÇ¨Ïù¥Ìä∏ ÎèÑÏ∂ú"
        },
        {
            id: "writer",
            active: false,
            avatar: "‚úèÔ∏è",
            avatarBg: "#f59e0b",
            name: "ÏûëÏÑ± ÏóêÏù¥Ï†ÑÌä∏",
            desc: "Î¨∏ÏÑú ÏûëÏÑ±, ÏΩòÌÖêÏ∏† Ï†úÏûë, Î≤àÏó≠, ÍµêÏ†ï Îì± ÌÖçÏä§Ìä∏ Í¥ÄÎ†® ÏóÖÎ¨¥Î•º Ï≤òÎ¶¨Ìï©ÎãàÎã§.",
            capabilities: ["Î¨∏ÏÑú ÏûëÏÑ±", "ÏΩòÌÖêÏ∏† Ï†úÏûë", "Î≤àÏó≠", "ÍµêÏ†ï"],
            model: "Claude-3 Haiku",
            description: "Î¨∏ÏÑú ÏûëÏÑ± Î∞è ÏΩòÌÖêÏ∏† Ï†úÏûë"
        },
        {
            id: "creative",
            active: false,
            avatar: "üé®",
            avatarBg: "#ec4899",
            name: "Ï∞ΩÏûë ÏóêÏù¥Ï†ÑÌä∏",
            desc: "Ï∞ΩÏùòÏ†Å ÏïÑÏù¥ÎîîÏñ¥ Î∞úÍµ¥, Î∏åÎ†àÏù∏Ïä§ÌÜ†Î∞ç, ÎîîÏûêÏù∏ Í∏∞Ìöç Îì± Ï∞ΩÏûë ÏóÖÎ¨¥Î•º Îã¥ÎãπÌï©ÎãàÎã§.",
            capabilities: ["ÏïÑÏù¥ÎîîÏñ¥ Î∞úÍµ¥", "Î∏åÎ†àÏù∏Ïä§ÌÜ†Î∞ç", "Í∏∞Ìöç", "Ïä§ÌÜ†Î¶¨ÌÖîÎßÅ"],
            model: "Claude-3 Opus",
            description: "Ï∞ΩÏùòÏ†Å ÏïÑÏù¥ÎîîÏñ¥ Î∞è Í∏∞Ìöç"
        },
        {
            id: "translator",
            active: false,
            avatar: "üåê",
            avatarBg: "#06b6d4",
            name: "Î≤àÏó≠ ÏóêÏù¥Ï†ÑÌä∏",
            desc: "Îã§Íµ≠Ïñ¥ Î≤àÏó≠, ÌòÑÏßÄÌôî, Î¨∏ÌôîÏ†Å Îß•ÎùΩ Í≥†Î†§ Îì± Ïñ∏Ïñ¥ Í¥ÄÎ†® ÏóÖÎ¨¥Î•º Ï†ÑÎ¨∏ÏúºÎ°ú Ìï©ÎãàÎã§.",
            capabilities: ["Îã§Íµ≠Ïñ¥ Î≤àÏó≠", "ÌòÑÏßÄÌôî", "Î¨∏Ìôî Ï†ÅÏùë", "Ïñ∏Ïñ¥ ÍµêÏ†ï"],
            model: "Claude-3 Sonnet",
            description: "Îã§Íµ≠Ïñ¥ Î≤àÏó≠ Î∞è ÌòÑÏßÄÌôî"
        }
    ]);

    const models = [
        {
            name: "exaone-3.5",
            desc: "LG AI ResearchÏùò ÏµúÏã† Î©ÄÌã∞Î™®Îã¨ Î™®Îç∏",
        },
        {
            name: "claude-3-sonnet",
            desc: "AnthropicÏùò Í≥†ÏÑ±Îä• ÎåÄÌôî Î™®Îç∏",
        },
        {
            name: "gpt-4o",
            desc: "OpenAIÏùò ÏµúÏã† Î©ÄÌã∞Î™®Îã¨ Î™®Îç∏",
        },
        {
            name: "gemini-1.5-flash",
            desc: "GoogleÏùò Ï∞®ÏÑ∏ÎåÄ AI Î™®Îç∏",
        },
    ];
    const [dropdown, setdropdown] = useState(false);
    const [plusmenu, setplusmenu] = useState(false);

    const AgentCards = ({ agents, setagents }) => {
        const toggleAgent = (id, isActive) => {
            setagents((prev) =>
                prev.map((agent) =>
                    agent.id === id ? { ...agent, active: isActive } : agent
                )
            );
        };

        return (
            <>
                {agents.map((agent) => (
                    <div
                        key={agent.id}
                        className={`assistant-agent-card ${agent.active ? "active" : ""}`}
                        data-agent={agent.id}
                    >
                        <div className="assistant-agent-card-header">
                            <div
                                className="assistant-agent-card-avatar"
                                style={{ background: agent.avatarBg }}
                            >
                                {agent.avatar}
                            </div>
                            <div className="assistant-agent-card-info">
                                <h5>{agent.name}</h5>
                                <p>{agent.desc}</p>
                                <div className="assistant-agent-capabilities">
                                    {agent.capabilities.map((cap, idx) => (
                                        <span key={idx} className="assistant-capability-tag">
                                            {cap}
                                        </span>
                                    ))}
                                </div>
                                <div className="agent-model-info">Î™®Îç∏: {agent.model}</div>
                            </div>
                            <div className="assistant-agent-toggle">
                                <input
                                    type="checkbox"
                                    checked={agent.active}
                                    onChange={(e) => toggleAgent(agent.id, e.target.checked)}
                                />
                            </div>
                        </div>
                    </div>
                ))}
            </>
        );
    };

    const fetchKnowledges = async () => {
        try {
            const response = await fetch(
                `${process.env.NEXT_PUBLIC_API_URL}/MSP_KNOWLEDGE/msp_get_knowledge_by_user`,
                {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({ user_id: session?.user?.id }),
                }
            );
            const data = await response.json();
            console.log("‚úÖ ÏßÄÏãùÎ≤†Ïù¥Ïä§:", data);
            if (data.kbowledges) setknowledgeFiles(data.kbowledges);
        } catch (error) {
            console.error("‚ùå ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò:", error);
        }
    }
    useEffect(() => {
        if (!session?.user?.id) return;

        fetchKnowledges();
    }, [session?.user?.id])

    // Îç∞Ïù¥ÌÑ∞Ïóê ÏûàÎäî ÌååÏùº Î™©Î°ù
    const [knowledgeFiles, setknowledgeFiles] = useState([]);
    // ÌïÑÌÑ∞ Ï†ÅÏö©Îêú ÌååÏùº Î™©Î°ù
    const filteredFiles = [...knowledgeFiles];
    // ÏÑ∏ÏÖòÏóê Ï†ÄÏû•Îêú ÌååÏùº
    const [selectedFiles, setSelectedFiles] = useState(new Set());
    // ÏûÑÏãú Ï†ÄÏû•Îêú ÌååÏùº
    const [tempSelectedFiles, setTempSelectedFiles] = useState(new Set());

    const handleAddSelected = async () => {
        alert("ÏÑ∏ÏÖòÏóê ÏßÄÏãù Î≤†Ïù¥Ïä§ Ï∂îÍ∞Ä ÏöîÏ≤≠");
        console.log(tempSelectedFiles);
        try {
            const response = await fetch(
                `${process.env.NEXT_PUBLIC_API_URL}/MSP_KNOWLEDGE/msp_add_session_knowledge_association`,
                {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                        user_id: session?.user?.id,
                        session_id: currentSession?.id,
                        knowledge_ids: Array.from(tempSelectedFiles)
                    }),
                }
            );
            const data = await response.json();
            console.log("‚úÖ ÏÑ∏ÏÖòÏóê Ï∂îÍ∞ÄÎêú ÏßÄÏãù:", data);
            setSelectedFiles(new Set([...selectedFiles, ...tempSelectedFiles]));
            setKnowledge(false);
            fetchChatSessions();
            if (data.title) {
                setcurrentSession({ id: data.session_id, title: data.title });
            } else {
                setcurrentSession(prev => ({ ...prev, id: data.session_id }));
            }

            // if (data.kbowledges) setknowledgeFiles(data.kbowledges);
        } catch (error) {
            console.error("‚ùå ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò:", error);
        }


    };

    const RenderKnowledgeFiles = () => {
        const toggleFileSelection = (fileId) => {
            setTempSelectedFiles(prev => {
                const newSet = new Set(prev);
                if (newSet.has(fileId)) newSet.delete(fileId);
                else newSet.add(fileId);
                return newSet;
            });
        };

        return (
            <>
                {filteredFiles.length === 0 && (
                    <div
                        style={{
                            gridColumn: "1/-1",
                            textAlign: "center",
                            padding: "var(--spacing-8)",
                            color: "var(--gray-500)",
                        }}
                    >
                        <div
                            style={{
                                fontSize: "48px",
                                marginBottom: "var(--spacing-4)",
                            }}
                        >
                            üìÅ
                        </div>
                        <p>Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§.</p>
                    </div>
                )}

                {filteredFiles.map((file) => {
                    const fileIcon = getKnowledgeFileIcon(file.type);
                    const isSelected = tempSelectedFiles.has(file.id);

                    return (
                        <div
                            key={file.id}
                            className={`assistant-knowledge-file-item ${isSelected ? "selected" : ""}`}
                            data-file-id={file.id}
                            onClick={() => toggleFileSelection(file.id)}
                            title={file.origin_name}
                        >
                            <input
                                type="checkbox"
                                className="assistant-file-checkbox"
                                checked={isSelected}
                                onChange={() => toggleFileSelection(file.id)}
                                onClick={(e) => e.stopPropagation()}
                            />

                            <div className={`assistant-file-type-icon ${file.type}`}>{fileIcon}</div>

                            <div className="assistant-knowledge-file-info">
                                <div className="assistant-knowledge-file-title">{file.origin_name}</div>

                                <div className="assistant-knowledge-file-meta">
                                    <span>{file.size}KB</span> <br />
                                    <span>{file.created_at?.split("T")[0]}</span>
                                </div>

                                <div className="assistant-knowledge-file-desc">{file.description}</div>

                                <div className="assistant-knowledge-file-tags">
                                    {/* <span className="assistant-knowledge-tag folder">{getFolderName(file.folder)}</span> */}
                                    {file.tags.map((tag, index) => (
                                        <span key={index} className="assistant-knowledge-tag">
                                            {tag}
                                        </span>
                                    ))}
                                </div>
                            </div>
                        </div>
                    );
                })}
            </>
        );
    };

    const [Delete, setDelete] = useState(false);
    const [Setting, setSetting] = useState(false);

    const [messages, setMessages] = useState([]);

    const chatEndRef = useRef(null);
    useEffect(() => {
        if (chatEndRef.current) {
            chatEndRef.current.scrollIntoView({ behavior: "smooth" });
        }
    }, [messages]);

    const [userInput, setuserInput] = useState("");

    const handleKeyDown = (e) => {
        if (e.key === "Enter" && !e.shiftKey) {
            e.preventDefault(); // textarea Ï§ÑÎ∞îÍøà Î∞©ÏßÄ
            sendMessage();
        }
    };

    const [AssistantSettings, setAssistantSettings] = useState({
        LLM: "gemini-1.5-flash",
    });



    const sendMessage = async () => {
        if (!userInput.trim()) return;
        setuserInput("");
        const userMessage = {
            id: Date.now(), // Í≥†Ïú† ID
            type: "user",
            role: "user",
            created_at: new Date(),
            content: userInput
        };
        setMessages(prev => [...prev, userMessage]);

        const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/MSP_CHAT/msp_request_message`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                user_input: userInput,
                chat_model: AssistantSettings.LLM,
                session_id: currentSession.id,
                user_id: session?.user?.id,
                role: "user",
                project_id: currentProject.id
            }),
        });
        const data = await response.json();
        if (response.ok) {
            console.log("API ÏùëÎãµ:", data);
            fetchChatSessions();
            if (data.title) {
                setcurrentSession({ id: data.session_id, title: data.title });
            } else {
                setcurrentSession(prev => ({ ...prev, id: data.session_id }));
            }
            const Message = {
                id: Date.now() + 1,
                type: "agent",
                role: "assistant",
                // created_at: new Date().toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" }),
                created_at: new Date(),
                content: JSON.stringify(data.response)
            };
            setMessages(prev => [...prev, Message]);
        }
    };

    const newChat = async () => {
        // alert("newchat");
        setcurrentProject({});
        setcurrentSession({ id: 0 });
        setMessages([]);
        setSelectedFiles(new Set());
    }

    const renderKnowledge = async (conv) => {
        if (currentSession.id === conv.id) return console.log("ÎèôÏùºÌïú ÏÑ∏ÏÖòÏù¥Îùº ÏöîÏ≤≠ Ï∑®ÏÜå");
        // alert("knowledge ÎûúÎçîÎßÅ");
        try {
            const response = await fetch(
                `${process.env.NEXT_PUBLIC_API_URL}/MSP_KNOWLEDGE/msp_get_session_knowledge_association`,
                {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({ session_id: conv.id }),
                }
            );
            const data = await response.json();
            const ids = data.knowledge_ids || [];
            console.log("‚úÖ API ÏùëÎãµ:", data);
            setSelectedFiles(new Set(ids));
        } catch (error) {
            console.error("‚ùå ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò:", error);
        }
    }

    const renderSession = async (conv) => {
        if (currentSession.id === conv.id) return console.log("ÎèôÏùºÌïú ÏÑ∏ÏÖòÏù¥Îùº ÏöîÏ≤≠ Ï∑®ÏÜå");
        setcurrentSession({ id: conv.id, title: conv.title });

        conv.project_name
            ? setcurrentProject({ name: conv.project_name })
            : setcurrentProject({});

        try {
            const response = await fetch(
                `${process.env.NEXT_PUBLIC_API_URL}/MSP_CHAT/msp_read_message_by_session`,
                {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({ session_id: conv.id }),
                }
            );
            const data = await response.json();
            console.log("‚úÖ API ÏùëÎãµ:", data);
            setMessages(data)
        } catch (error) {
            console.error("‚ùå ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò:", error);
        }
    }

    const fileInputRef = useRef(null);
    // Î≤ÑÌäº ÌÅ¥Î¶≠ Ïãú ÌååÏùº ÏÑ†ÌÉùÏ∞Ω Ïó¥Í∏∞
    const handleFileSelect = () => {
        fileInputRef.current.click();
    };
    // ÌååÏùº ÏÑ†ÌÉù ÌõÑ ÎèôÏûë
    const handleFileChange = (event) => {
        const file = event.target.files[0];
        if (file) {
            // console.log("ÏÑ†ÌÉùÎêú ÌååÏùº:", file.name);
            // Ïó¨Í∏∞ÏÑú ÏóÖÎ°úÎìú Î°úÏßÅ Ï∂îÍ∞Ä Í∞ÄÎä•
        }
    };


    const UpdateAttachedFilesList = () => {
        // selectedFilesÏóê Ìè¨Ìï®Îêú ÌååÏùºÎßå ÌïÑÌÑ∞ÎßÅ
        const attachedFilesList = knowledgeFiles.filter((file) =>
            selectedFiles.has(file.id)
        );

        const handleRemoveFile = (fileId) => {
            const newSelectedFiles = new Set(selectedFiles);
            newSelectedFiles.delete(fileId);
            setSelectedFiles(newSelectedFiles);
        };

        return (
            <>
                {selectedFiles.size === 0 && (
                    <div className="empty-files">
                        <div className="empty-icon">üìÅ</div>
                        <p>Ï≤®Î∂ÄÎêú ÌååÏùºÏù¥ ÏóÜÏäµÎãàÎã§</p>
                    </div>
                )}

                {attachedFilesList.map((file) => (
                    <div className="attached-file-item" key={file.id}>
                        <div className="file-icon">{getKnowledgeFileIcon(file.type)}</div>
                        <div className="file-info">
                            <div className="file-name" title={`${file.name}`}>{truncateFileName(file.origin_name)}</div>
                            <div className="file-size">{file.size}KB</div>
                        </div>
                        <button className="remove-file-btn" onClick={() => handleRemoveFile(file.id)}>
                            ‚úï
                        </button>
                    </div>
                ))}
            </>
        );
    };

    return (
        <>

            {/* Î™®Îã¨Ï∞Ω Î™®Ïùå */}
            <div className={`modal-overlay ${Agent ? 'active' : ''}`}>
                <AgentHandler
                    setAgent={setAgent}
                    AgentCards={<AgentCards agents={agents} setagents={setagents} />}
                />
            </div>

            <div className={`modal-overlay ${Knowledge ? 'active' : ''}`}>
                <KnowledgeHandler
                    setKnowledge={setKnowledge}
                    RenderKnowledgeFiles={<RenderKnowledgeFiles />}
                    selectedFiles={tempSelectedFiles}
                    handleAddSelected={handleAddSelected}
                />
            </div>

            <div className={`modal-overlay ${Delete ? 'active' : ''}`}>
                <ConfirmClearChat setDelete={setDelete} setMessages={setMessages} />
            </div>

            <div className={`modal-overlay ${Setting ? 'active' : ''}`}>
                <SettingChat setSetting={setSetting} />
            </div>




            <div className="assistant_container">
                {/* Ï¢åÏ∏° Ï±ÑÌåÖ ÏÇ¨Ïù¥ÎìúÎ∞î - Ïπ¥ÎìúÌòï ÎîîÏûêÏù∏ */}
                <div className="assistant-chat-sidebar">
                    {/* ÏµúÍ∑º ÎåÄÌôî Ïπ¥Îìú */}
                    <div className="sidebar-card conversations-card">
                        <div className="assistant-card-header">
                            <div className="assistant-card-title">üí¨ ÏµúÍ∑º ÎåÄÌôî</div>
                            <button className="assistant-primary-btn" id="assistant-new-chat-btn"
                                onClick={() => newChat()}
                                disabled={currentSession.id === 0}
                            >
                                <span>+</span>
                                <span>ÏÉà ÎåÄÌôî</span>
                            </button>
                        </div>

                        <div className="assistant-conversations-list" id="conversations-list">
                            {conversations.map((conv, index) => (
                                <div
                                    key={index}
                                    className={`conversation-item ${conv.id === currentSession.id ? "active" : ""}`}
                                    onClick={() => { renderSession(conv), renderKnowledge(conv) }}
                                >
                                    <div className="conversation-header">
                                        <div className="assistant-conversation-title">{conv.title}</div>
                                        <div className="conversation-time">{conv.time}</div>
                                    </div>
                                    <div className="assistant-conversation-preview">{conv.preview}</div>
                                </div>
                            ))}
                        </div>
                    </div>

                    {/* Ï≤®Î∂ÄÌååÏùº Ïπ¥Îìú */}
                    <div className="sidebar-card files-card">
                        <div className="assistant-card-header">
                            <div className="assistant-card-title">üìé Ï≤®Î∂ÄÌååÏùº</div>
                        </div>

                        <div className="files-count">üìÑ Ï≤®Î∂ÄÎêú ÌååÏùº ({selectedFiles.size}Í∞ú)</div>

                        <div className="knowledge-files" id="attached-files-list">
                            {<UpdateAttachedFilesList />}
                        </div>

                        <div className="files-help">
                            <p>üí° + Î≤ÑÌäºÏóêÏÑú ÌååÏùºÏùÑ Ï≤®Î∂ÄÌïòÍ±∞ÎÇò<br />
                                ÏûÖÎ†•Ï∞ΩÏóê ÌååÏùºÏùÑ ÎìúÎûòÍ∑∏ÎÜìÏúºÏÑ∏Ïöî</p>
                        </div>
                    </div>
                </div>

                {/* Ï±ÑÌåÖ ÏòÅÏó≠ */}
                <div className="assistant-chat-main">
                    <div className="chat-card">
                        <div className="chat-header">
                            <div className="chat-info">
                                <div className="chat-title" id="chat-title">
                                    {currentSession.title}
                                    {currentProject?.name && (
                                        <span className="project-name">( {currentProject.name} )</span>
                                    )}
                                </div>
                                <div className="chat-agents" id="chat-agents">
                                    {/* ÌôúÏÑ± ÏóêÏù¥Ï†ÑÌä∏ Î±ÉÏßÄÎì§Ïù¥ Ïó¨Í∏∞Ïóê ÎèôÏ†ÅÏúºÎ°ú Ï∂îÍ∞ÄÎê©ÎãàÎã§ */}
                                    <UpdateChatAgentsBadges agents={agents} />
                                </div>
                            </div>

                            <div className="chat-controls">
                                <button className="control-btn" title="ÎåÄÌôî ÏßÄÏö∞Í∏∞" onClick={() => setDelete(true)}>üóëÔ∏è</button>
                                <button className="control-btn" title="ÏÑ§Ï†ï" onClick={() => setSetting(true)}>‚öôÔ∏è</button>
                            </div>
                        </div>

                        {/* Ï±ÑÌåÖÏ∞Ω ÏòÅÏó≠ */}
                        <div className="chat-messages" id="chat-messages">
                            {/* Ï¥àÍ∏∞ Ïõ∞Ïª¥ Î©îÏãúÏßÄ */}
                            {messages.length === 0 && (
                                <div className="welcome-message" id="welcome-message">
                                    <div className="welcome-icon">üí¨</div>
                                    <div className="welcome-title">{session?.user?.name}Îãò, Î¨¥ÏóáÏùÑ ÎèÑÏôÄÎìúÎ¶¥ÍπåÏöî?</div>
                                    <div className="welcome-subtitle">Î©ÄÌã∞ ÏóêÏù¥Ï†ÑÌä∏ÏôÄ Ìï®Íªò Îã§ÏñëÌïú ÏûëÏóÖÏùÑ ÏãúÏûëÌï¥Î≥¥ÏÑ∏Ïöî</div>
                                </div>
                            )}


                            {messages.map((msg) => {
                                const date = new Date(msg.created_at);
                                date.setHours(date.getHours() + 9);
                                return (
                                    <div
                                        key={msg.id}
                                        className={`message ${msg.role === "user" ? "user-message" : ""}`}
                                    >
                                        <div
                                            className={`message-avatar ${msg.role === "assistant" ? "agent-avatar-msg" : "user-avatar"}`}
                                            style={msg.avatarBg ? { background: msg.avatarBg } : {}}
                                        >
                                            {msg.role === "assistant" ? "ü§ñ" : "üë§"}
                                        </div>
                                        <div className="message-content">
                                            <div className={`message-header ${msg.role === "user" ? "user" : ""}`}>
                                                <div className="message-sender">{msg.role === "user" ? session?.user?.name : msg.role}</div>
                                                <div className="message-time">
                                                    {date.toLocaleString("ko-KR", {
                                                        month: "2-digit",
                                                        day: "2-digit",
                                                        hour: "2-digit",
                                                        minute: "2-digit",
                                                        hour12: false,
                                                    })}
                                                </div>
                                            </div>
                                            <div className="message-text">{msg.content}</div>
                                        </div>
                                    </div>
                                )
                            })}

                            {/* ÎßàÏßÄÎßâ Î©îÏãúÏßÄ Ï∞∏Ï°∞ */}
                            <div ref={chatEndRef} />

                        </div>

                        <div className="chat-input-area">
                            <div className="chat-input-wrapper">
                                {/* + Î≤ÑÌäº */}
                                <div className="plus-btn" id="plus-btn"
                                    onClick={() => setplusmenu((prev) => !prev)}
                                >
                                    +
                                    {/* ÌÜµÌï© ÌåùÏóÖ Î©îÎâ¥ */}
                                    <div className={`plus-menu ${plusmenu ? "open" : ""}`} id="plus-menu">
                                        <div className="menu-section"
                                            onClick={() => setAgent(true)}
                                        >
                                            <div className="menu-section-title">AI ÏóêÏù¥Ï†ÑÌä∏</div>
                                            <div className="menu-item" >
                                                <div className="menu-item-icon">üë•</div>
                                                <div className="menu-item-text">
                                                    <div className="menu-item-title">ÏóêÏù¥Ï†ÑÌä∏</div>
                                                    <div className="menu-item-desc">AI ÏóêÏù¥Ï†ÑÌä∏ ÏÑ†ÌÉù Î∞è Í¥ÄÎ¶¨</div>
                                                </div>
                                            </div>
                                        </div>

                                        <div className="menu-section">
                                            <div className="menu-section-title">ÏßÄÏãùÎ≤†Ïù¥Ïä§</div>
                                            <div className="menu-item"
                                                onClick={() => { setKnowledge(true), setTempSelectedFiles(selectedFiles); }}
                                            >
                                                <div className="menu-item-icon">üìö</div>
                                                <div className="menu-item-text">
                                                    <div className="menu-item-title">ÏßÄÏãùÎ≤†Ïù¥Ïä§ ÎùºÏù¥Î∏åÎü¨Î¶¨</div>
                                                    <div className="menu-item-desc">Ï†ÄÏû•Îêú ÏßÄÏãùÎ≤†Ïù¥Ïä§ÏóêÏÑú ÏÑ†ÌÉù</div>
                                                </div>
                                            </div>
                                            <div className="menu-item"
                                                onClick={handleFileSelect}
                                            >
                                                <div className="menu-item-icon">üìé</div>
                                                <div className="menu-item-text">
                                                    <div className="menu-item-title">ÌååÏùº Ï≤®Î∂Ä</div>
                                                    <div className="menu-item-desc">ÌòÑÏû¨ ÎåÄÌôîÏóê ÌååÏùº Ï≤®Î∂Ä</div>
                                                </div>

                                                <input
                                                    type="file"
                                                    ref={fileInputRef}
                                                    style={{ display: "none" }}
                                                    onChange={handleFileChange}
                                                />

                                            </div>

                                        </div>

                                        <div className="menu-section">
                                            <div className="menu-section-title">Ïô∏Î∂Ä Ïó∞Îèô</div>
                                            <div className="menu-item" >
                                                <div className="menu-item-icon">üíæ</div>
                                                <div className="menu-item-text">
                                                    <div className="menu-item-title">Google Drive</div>
                                                    <div className="menu-item-desc">ÌÅ¥ÎùºÏö∞Îìú ÌååÏùº Ïó∞Îèô</div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <textarea
                                    className="chat-input"
                                    id="chat-input"
                                    placeholder="Î©îÏãúÏßÄÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî... (Shift+EnterÎ°ú Ï§ÑÎ∞îÍøà, EnterÎ°ú Ï†ÑÏÜ°)"
                                    rows="1"
                                    value={userInput}
                                    onChange={(e) => setuserInput(e.target.value)}
                                    onKeyDown={handleKeyDown}
                                ></textarea>

                                <div className="input-actions">
                                    {/* Î™®Îç∏ ÏÑ†ÌÉù Î≤ÑÌäº  */}
                                    <div className="model-selector-btn" id="model-selector-btn"
                                        onClick={() => setdropdown((prev) => !prev)}
                                    >
                                        {/* <span className="model-icon" id="model-icon">üß†</span> */}
                                        <span className="model-name" id="current-model-name">{AssistantSettings.LLM}</span>
                                        <span className="dropdown-arrow">‚ñº</span>

                                        {/* Î™®Îç∏ ÏÑ†ÌÉù ÎìúÎ°≠Îã§Ïö¥ */}
                                        <div className={`model-dropdown-menu ${dropdown ? "open" : ""}`} id="model-dropdown-menu">
                                            {models.map((model) => (
                                                <div className="model-item" key={model.name}
                                                    onClick={() =>
                                                        setAssistantSettings({
                                                            ...AssistantSettings,
                                                            LLM: model.name
                                                        })
                                                    }
                                                >
                                                    <div className="model-item-info">
                                                        {/* <div className="model-item-icon">{model.icon}</div> */}
                                                        <div className="model-item-text">
                                                            <div className="model-item-title">{model.name}</div>
                                                            <div className="model-item-desc">{model.desc}</div>
                                                        </div>
                                                    </div>
                                                    <span
                                                        className={`model-check ${model.name === AssistantSettings.LLM ? "active" : ""}`}
                                                        id={model.id}
                                                    >
                                                        ‚úì
                                                    </span>
                                                </div>
                                            ))}
                                        </div>
                                    </div>
                                    <button className="send-btn" id="send-btn" >
                                        <span id="send-icon">‚û§</span>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>


        </>
    );
}

function SettingChat({ setSetting }) {
    return (
        <>
            <div className="assistant-modal settings-modal">
                <div className="assistant-modal-header">
                    <h2 className="assistant-modal-title">ÏÑ§Ï†ï</h2>
                    <button className="assistant-modal-close"
                        onClick={() => setSetting(false)}
                    >&times;</button>
                </div>
                <div className="assistant-modal-body">
                    {/* ÏûêÎèôÏ†ÄÏû• ÏÑ§Ï†ï  */}
                    <div className="settings-section">
                        <h3 className="settings-section-title">ÎåÄÌôî ÏÑ§Ï†ï</h3>
                        <div className="setting-item">
                            <div className="setting-info">
                                <div className="setting-label">ÏûêÎèôÏ†ÄÏû•</div>
                                <div className="setting-desc">ÎåÄÌôîÎ•º ÏûêÎèôÏúºÎ°ú Ï†ÄÏû•Ìï©ÎãàÎã§</div>
                            </div>
                            <div className="setting-toggle">
                                <input type="checkbox" id="auto-save-toggle" checked readOnly />
                            </div>
                        </div>
                    </div>

                    {/* Ïù∏ÌÑ∞ÌéòÏù¥Ïä§ ÏÑ§Ï†ï  */}
                    <div className="settings-section">
                        <h3 className="settings-section-title">Ïù∏ÌÑ∞ÌéòÏù¥Ïä§ ÏÑ§Ï†ï</h3>
                        <div className="setting-item">
                            <div className="setting-info">
                                <div className="setting-label">Îã§ÌÅ¨Î™®Îìú</div>
                                <div className="setting-desc">Ïñ¥ÎëêÏö¥ ÌÖåÎßàÎ°ú Ï†ÑÌôòÌï©ÎãàÎã§</div>
                            </div>
                            <div className="setting-toggle">
                                <input type="checkbox" id="dark-mode-toggle" />
                            </div>
                        </div>
                    </div>
                </div>
                <div className="assistant-modal-footer">
                    <button className="assistant-primary-btn"
                        onClick={() => setSetting(false)}
                    >ÌôïÏù∏</button>
                </div>
            </div>

        </>
    )
}

function ConfirmClearChat({ setDelete, setMessages }) {
    return (
        <>
            <div className="assistant-modal clear-chat-modal" style={{ maxWidth: "400px" }}>
                <div className="assistant-modal-header">
                    <h2 className="assistant-modal-title">ÎåÄÌôî ÏßÄÏö∞Í∏∞</h2>
                    <button className="assistant-modal-close"
                        onClick={() => setDelete(false)}
                    >&times;</button>
                </div>
                <div className="assistant-modal-body">
                    <p style={{ color: "var(--gray-600)", textAlign: "center", marginBottom: "var(--spacing-4)" }}>
                        ÌòÑÏû¨ ÎåÄÌôîÏùò Î™®Îì† Î©îÏãúÏßÄÏôÄ Ï≤®Î∂ÄÌååÏùºÏù¥ ÏÇ≠Ï†úÎê©ÎãàÎã§.
                    </p>
                    <p style={{ color: "var(--danger-red)", textAlign: "center", fontWeight: "600" }}>
                        Ïù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏäµÎãàÎã§.
                    </p>
                </div>
                <div className="assistant-modal-footer">
                    <button className="assistant-secondary-btn"
                        onClick={() => setDelete(false)}
                    >Ï∑®ÏÜå</button>
                    <button className="assistant-primary-btn" style={{ background: "var(--danger-red)" }}
                        onClick={() => {
                            setMessages([]);
                            setDelete(false);
                        }}
                    >ÏßÄÏö∞Í∏∞</button>
                </div>
            </div >
        </>
    )
}

function UpdateChatAgentsBadges({ agents }) {
    const activeAgents = agents.filter(agent => agent.active);

    return (
        <>
            {activeAgents.map(agent => (
                <div key={agent.id} className="chat-agent-badge" style={{ background: `${agent.avatarBg}` }}>
                    {agent.avatar} {agent.name}
                </div>
            ))}
        </>
    );
}

function AgentHandler({ setAgent, AgentCards }) {
    return (
        <>
            <div className="assistant-modal assistant-agents-management">
                <div className="assistant-modal-header">
                    <h2 className="assistant-modal-title">ÏóêÏù¥Ï†ÑÌä∏ Í¥ÄÎ¶¨</h2>
                    <button className="assistant-modal-close"
                        onClick={() => setAgent(false)}
                    >&times;</button>
                </div>
                <div className="assistant-modal-body">
                    <p
                        style={{
                            color: "var(--gray-600)",
                            marginBottom: "var(--spacing-6)",
                            textAlign: "center",
                        }}
                    >
                        ÌôúÏÑ±ÌôîÌï† ÏóêÏù¥Ï†ÑÌä∏Î•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî. ÏÑ†ÌÉùÎêú ÏóêÏù¥Ï†ÑÌä∏Îì§Ïù¥ ÎåÄÌôîÏóê Ï∞∏Ïó¨Ìï©ÎãàÎã§.
                    </p>
                    <div className="assistant-agents-grid" id="agents-grid">
                        {/* ÏóêÏù¥Ï†ÑÌä∏ Ïπ¥ÎìúÎì§Ïù¥ Ïó¨Í∏∞Ïóê ÎèôÏ†ÅÏúºÎ°ú Ï∂îÍ∞ÄÎê©ÎãàÎã§  */}
                        {AgentCards}
                    </div>
                </div>
                <div className="assistant-modal-footer">
                    <button className="assistant-secondary-btn"
                        onClick={() => setAgent(false)}
                    >Ï∑®ÏÜå</button>
                    <button className="assistant-primary-btn"
                        onClick={() => setAgent(false)}
                    >ÏÑ§Ï†ï Ï†ÄÏû•</button>
                </div>
            </div>
        </>
    );
}

function KnowledgeHandler({ setKnowledge, RenderKnowledgeFiles, selectedFiles, handleAddSelected }) {
    const handle_knowledge = async () => {
        console.log(selectedFiles);
        setKnowledge(false);
    }
    return (
        <>
            <div className="modal knowledge-library-modal" style={{ maxWidth: "1000px", width: "95%" }}>
                <div className="assistant-modal-header">
                    <h2 className="assistant-modal-title">ÏßÄÏãùÎ≤†Ïù¥Ïä§ ÎùºÏù¥Î∏åÎü¨Î¶¨</h2>
                    <button className="assistant-modal-close"
                        onClick={() => setKnowledge(false)}
                    >&times;</button>
                </div>
                <div className="assistant-modal-body">
                    <div className="assistant-knowledge-toolbar">
                        <div className="knowledge-search">
                            <input type="text" id="knowledge-search-input" placeholder="ÌååÏùºÎ™Ö, ÌÉúÍ∑∏, ÎÇ¥Ïö© Í≤ÄÏÉâ..." className="knowledge-search-input" />
                            <button className="knowledge-search-btn" >üîç</button>
                        </div>
                        <div className="knowledge-filters">
                            <select id="folder-filter" className="filter-select">
                                <option value="">Î™®Îì† Ìè¥Îçî</option>
                                <option value="projects">ÌîÑÎ°úÏ†ùÌä∏Î≥Ñ Î¨∏ÏÑú</option>
                                <option value="reports">Î≥¥Í≥†ÏÑú</option>
                                <option value="references">Ï∞∏Í≥† ÏûêÎ£å</option>
                                <option value="personal">Í∞úÏù∏ Î¨∏ÏÑú</option>
                            </select>
                            <select id="type-filter" className="filter-select">
                                <option value="">Î™®Îì† ÌååÏùº</option>
                                <option value="pdf">PDF</option>
                                <option value="doc">Î¨∏ÏÑú</option>
                                <option value="excel">Ïä§ÌîÑÎ†àÎìúÏãúÌä∏</option>
                                <option value="ppt">ÌîÑÎ†àÏ††ÌÖåÏù¥ÏÖò</option>
                            </select>
                            <button className="view-toggle-btn" id="view-toggle" >üìã</button>
                        </div>
                    </div>

                    <div className="knowledge-content">
                        <div className="knowledge-stats">
                            <span id="file-count">Ï¥ù 187Í∞ú ÌååÏùº</span>
                            <span id="selected-count">0Í∞ú ÏÑ†ÌÉùÎê®</span>
                        </div>

                        <div className="assistant-knowledge-files-grid" id="knowledge-files-grid">
                            {/* ÌååÏùºÎì§Ïù¥ ÎèôÏ†ÅÏúºÎ°ú Î†åÎçîÎßÅÎê©ÎãàÎã§  */}
                            {RenderKnowledgeFiles}
                        </div>
                    </div>
                </div>
                <div className="assistant-modal-footer">
                    <div className="assistant-footer-left">
                        <button className="assistant-secondary-btn" >Ï†ÑÏ≤¥ ÏÑ†ÌÉù</button>
                        <button className="assistant-secondary-btn" >ÏÑ†ÌÉù Ìï¥Ï†ú</button>
                    </div>
                    <div className="assistant-footer-right">
                        <button className="assistant-secondary-btn"
                            onClick={() => setKnowledge(false)}
                        >Ï∑®ÏÜå</button>
                        <button className="assistant-primary-btn" id="add-selected-btn" disabled={selectedFiles.size === 0}
                            // onClick={() => handle_knowledge()}
                            onClick={handleAddSelected}

                        >
                            ÏÑ†ÌÉùÎêú ÌååÏùº Ï∂îÍ∞Ä (<span id="selected-file-count">{selectedFiles.size}</span>)
                        </button>
                    </div>
                </div>
            </div>
        </>
    )
}

function getKnowledgeFileIcon(type) {
    const icons = {
        "application/pdf": 'üìÑ',
        doc: 'üìÑ',
        excel: 'üìä',
        ppt: 'üìΩÔ∏è'
    };
    return icons[type] || 'üìé';
}

function getFolderName(folder) {
    const folderNames = {
        projects: 'ÌîÑÎ°úÏ†ùÌä∏Î≥Ñ Î¨∏ÏÑú',
        reports: 'Î≥¥Í≥†ÏÑú',
        references: 'Ï∞∏Í≥† ÏûêÎ£å',
        personal: 'Í∞úÏù∏ Î¨∏ÏÑú'
    };
    return folderNames[folder] || folder;
}

// ÌååÏùºÎ™Ö ÏûêÎ•¥Í∏∞ Ìï®Ïàò
function truncateFileName(fileName, maxLength = 20) {
    if (fileName.length <= maxLength) return fileName;
    const extension = fileName.split('.').pop();
    const baseName = fileName.substring(0, fileName.lastIndexOf('.'));
    const truncatedBaseName = baseName.substring(0, maxLength - extension.length - 4);
    return `${truncatedBaseName}...${extension}`;
}